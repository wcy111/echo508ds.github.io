[{"title":"神经网络中的数据表示","url":"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>\n        <h1 id=\"神经网络中的数据表示\"   >\n          <a href=\"#神经网络中的数据表示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#神经网络中的数据表示\"></a> 神经网络中的数据表示</h1>\n      \n<p>矩阵运算加块了神经网络的计算速度，而在应用中数据常常存储在多维Numpy数组中，其也被称为张量(tensor). 当前基本所有机器学习系统都使用张量作为数据结构，它对这个领域尤为的重要，以TensorFlow的命名就可窥见。</p>\n<p>张量这一概念的核心在与，它是数据容器。 其中矩阵就是二维张量，张量事实上是矩阵向任意维度的推广。（张量的维度(dimension)常被称作轴(axis)，张量轴的个数被称为阶（rank））</p>\n<hr />\n\n        <h2 id=\"标量scalar0d张量\"   >\n          <a href=\"#标量scalar0d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#标量scalar0d张量\"></a> 标量（scalar）0D张量</h2>\n      \n<p>Numpy中，一个 float32和float64的数字就是一个0D张量。其可用ndim属性来查看。0D张量的ndim==0,如下图所示。</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306204113139.png\" class=\"\">\n\n        <h2 id=\"向量vector1d张量\"   >\n          <a href=\"#向量vector1d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#向量vector1d张量\"></a> 向量（vector）1D张量</h2>\n      \n<p>很多数据中标签是存储在1D张量中的。其形式如下</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306204514761.png\" class=\"\">\n<p>这个向量中有6个元素，被称为6D向量，易与张量的阶数混淆。事实上6D向量只有一个轴，沿着轴有6个维度(dimensionality)。6D张量才有6个轴。其中，维度既可以表示某个轴上的元素个数，也可以表示张量中的轴数。后者更准确的叫法应该是6阶张量。但是6D张量这种写法常见。</p>\n\n        <h2 id=\"矩阵matrix-2d张量\"   >\n          <a href=\"#矩阵matrix-2d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#矩阵matrix-2d张量\"></a> 矩阵(matrix) 2D张量</h2>\n      \n<p>向量组成的数组叫矩阵。矩阵有两个轴，通常称为行（row）和列(column)，其形式如下</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210108337.png\" class=\"\">\n<p>3X2的矩阵</p>\n\n        <h2 id=\"3d张量\"   >\n          <a href=\"#3d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#3d张量\"></a> 3D张量</h2>\n      \n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210342187.png\" class=\"\">\n<p>以CIFAR10数据集为例</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210616667.png\" class=\"\">\n<p>3D张量分别存储 高度 宽度和颜色深度，其大小为32*32像素，颜色深度维数为3，分别对应RGB三个颜色通道。</p>\n\n        <h2 id=\"4d张量\"   >\n          <a href=\"#4d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#4d张量\"></a> 4D张量</h2>\n      \n<p>关于4D张量：当许多图片累加起来时3D张量就不足以存储，需要增加一个拥有N维的轴来存储N个图片样本。</p>\n\n        <h2 id=\"5d张量\"   >\n          <a href=\"#5d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#5d张量\"></a> 5D张量</h2>\n      \n<p>关于5D张量：其中视频数据可以被看做事5D张量的少数数据类型之一，视频可以被看做由一系列帧（Frame）构成。每一个帧可以保存在一个形状为（height,width,color_depth）的3D向量中，一系列帧可以保存在(frames,height,width,color_depth)的4D张量中，不同视频数据组成的批量可以保存在5D张量中(samples,frames,height,width,color_depth)</p>\n","categories":["Programming"],"tags":["Deep Learning","Data Science"]},{"title":"Interpretable Machine Learning(LIME-1)","url":"/2021/04/15/Interpretable%20Machine%20Learning/","content":"\n        <h2 id=\"关于lime\"   >\n          <a href=\"#关于lime\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#关于lime\"></a> 关于LIME</h2>\n      \n<p>因为研究需要，得弄懂kernel SHAP所以先得弄明白LIME，不想这东西还挺有意思的，该算法发表在2016的KDD上，先挂个介绍视频吧。</p>\n<div class=\"video-container\"><iframe src=\"https://www.youtube.com/embed/hUnRCxnydCc\" frameborder=\"0\" loading=\"lazy\" allowfullscreen></iframe></div>\n<p>视频简单形象介绍了LIME以及该算法的motivation和intuition. 总结一下，我们可以用LIME去1) 在几个旗鼓相当（性能相似）的模型中做选择。2）去鉴别不值得信任的模型并改善。3）从模型中得到新的发现灵感。</p>\n<p>具体一点，<br />\n1）的应用主要是在满足metric需要的模型之间找到更适合需求的模型，比如有的模型虽然perform well但是解释性一团糟，又比如有的语言模型涉嫌种族歧视……</p>\n<p>2）有一些模型perform beyond expectation，有很大嫌疑发生了data leakage（我就被这个坑惨了），比如说用来鉴别学生属于哪个班级，模型将学生ID作为特征，而由ID可直接推出学生班级。又比如图像领域，识别北极熊和棕熊，模型将雪地背景作为判别image 是否为北极熊的重要特征。这些模型虽然表现的很好但是却毫无意义（本质为过拟合），在部署上线后会变得一塌糊涂。</p>\n<p>3）这方面应用就比较灵活了，可以用于异常检测，也可以用于特征选择或者构建新的powerful feature…</p>\n\n        <h2 id=\"lime算法\"   >\n          <a href=\"#lime算法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#lime算法\"></a> LIME算法</h2>\n      \n\n        <h3 id=\"idea\"   >\n          <a href=\"#idea\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#idea\"></a> IDEA</h3>\n      \n<p>LIME（Local Interpretable Model-Agnostic Explanations )属于局部代理模型，是一种可解释的模型用于解释黑盒机器模型对单个实例（individual）的预测。它的想法非常直觉，首先我们仅保留训练好的黑盒模型，然后扰动数据生成新的样本，通过黑盒模型得到这些样本的预测值作为LIME explainer的label，训练LIME explainer，由于explainer对比原来的黑盒模型更加简单，我们可以通过它作为原始黑盒模型的代理对感兴趣的样本点进行解释和分析。</p>\n<p>实际上，explainer可以是任何模型，但是因为复杂度的因素，Lasso（linear regression with L1）和decision tree通常被选作explainer.</p>\n\n        <h3 id=\"mathematics\"   >\n          <a href=\"#mathematics\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#mathematics\"></a> Mathematics</h3>\n      \n<p>数学上，带有模型复杂度（可解释性）正则项限制的局部代理模型</p>\n<p class='katex-block'><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">explanation</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>arg</mi><mo>⁡</mo><munder><mo><mi>min</mi><mo>⁡</mo></mo><mrow><mi>g</mi><mo>∈</mo><mi>G</mi></mrow></munder><mi>L</mi><mrow><mo fence=\"true\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><mi>g</mi><mo separator=\"true\">,</mo><msub><mi>π</mi><mi>x</mi></msub><mo fence=\"true\">)</mo></mrow><mo>+</mo><mi mathvariant=\"normal\">Ω</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{explanation}(x)=\\arg \\min _{g \\in G} L\\left(f, g, \\pi_{x}\\right)+\\Omega(g)\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">x</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">l</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span><span class=\"mord mathrm\">i</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">n</span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.630439em;vertical-align:-0.880439em;\"></span><span class=\"mop\">ar<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.66786em;\"><span style=\"top:-2.0556690000000004em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mrel mtight\">∈</span><span class=\"mord mathdefault mtight\">G</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">min</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.880439em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\">)</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Ω</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>其中f函数代表待解释的black-box model, g函数则是在G函数空间中的一个解释性模型，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>π</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">π_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>代表感兴趣样本x的邻样本范围的大小。</p>\n<p>显然，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>π</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">π_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>如果越大，则有越多的远离interest point的实例被用于构建local surrogate explainer，可能会引入一些新的解释。其次关于正则项<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Omega(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Ω</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>，我个人的理解是G空间中会有很多在损失函数上表现相当的函数，我们要从中选取那些复杂度低，解释性好的。具体的，该项可以用于heterogeneous models之间的选择，比如决策树和线性模型，也可以用于homogeneous models之间的选择，不同特征数量的线性模型或者不同深度不同叶子节点数目的决策树等…</p>\n<p>但是这里需要注意的是，在实际操作中，我们只对损失函数项进行优化，复杂度的正则项是通过我们预先限制模型的复杂度来得到的。</p>\n\n        <h3 id=\"recipe-for-raining-local-surrogate-models\"   >\n          <a href=\"#recipe-for-raining-local-surrogate-models\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#recipe-for-raining-local-surrogate-models\"></a> Recipe for raining local surrogate models</h3>\n      \n<p>其算法执行的流程大致如下:</p>\n<p>1） 选择感兴趣的实例（经由黑盒模型预测的某个实例）</p>\n<p>2）扰动数据集（采样）得到新的样本，并输入到黑盒模型中得到其预测值作为其标签。</p>\n<p>3）对这些新的样本根据与感兴趣实例的接近程度（类似特征向量的欧氏距离）来进行赋权。</p>\n<p>4）基于新的样本训练可解释模型</p>\n<p>5）通过可解释模型解释感兴趣的实例</p>\n","categories":["Machine learning","Interpretable Machine Learning"],"tags":["Machine learning","Interpretable Machine Learning","LIME"]},{"title":"List comprehension","url":"/2021/04/12/list-comprehension/","content":"<!-- more -->\n<p>最近学习了列表解析式(List comprehension )，它属于Python中的语法糖(Syntactic Sugar)。语法糖的出现主要是为了写程序的时候能少出错并且代码可以更简洁。这篇通过LeetCode的17. Letter Combinations of a Phone Number的一个解法引出这个表达。</p>\n<hr />\n\n        <h1 id=\"引例\"   >\n          <a href=\"#引例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#引例\"></a> 引例</h1>\n      \n<p>题目不赘述了，给出链接<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\" >Letter Combinations of a Phone Number</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n<p>比较认同的一个解法如下:</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">letterCombinations</span>(<span class=\"params\">self, digits: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">list</span>:</span></span><br><span class=\"line\">        graph = &#123;<span class=\"string\">&#x27;2&#x27;</span>:[<span class=\"string\">&#x27;a&#x27;</span>,<span class=\"string\">&#x27;b&#x27;</span>,<span class=\"string\">&#x27;c&#x27;</span>], <span class=\"string\">&#x27;3&#x27;</span>:[<span class=\"string\">&#x27;d&#x27;</span>,<span class=\"string\">&#x27;e&#x27;</span>,<span class=\"string\">&#x27;f&#x27;</span>], <span class=\"string\">&#x27;4&#x27;</span>:[<span class=\"string\">&#x27;g&#x27;</span>,<span class=\"string\">&#x27;h&#x27;</span>,<span class=\"string\">&#x27;i&#x27;</span>], <span class=\"string\">&#x27;5&#x27;</span>:[<span class=\"string\">&#x27;j&#x27;</span>,<span class=\"string\">&#x27;k&#x27;</span>,<span class=\"string\">&#x27;l&#x27;</span>], <span class=\"string\">&#x27;6&#x27;</span>:[<span class=\"string\">&#x27;m&#x27;</span>,<span class=\"string\">&#x27;n&#x27;</span>,<span class=\"string\">&#x27;o&#x27;</span>], <span class=\"string\">&#x27;7&#x27;</span>:[<span class=\"string\">&#x27;p&#x27;</span>,<span class=\"string\">&#x27;q&#x27;</span>,<span class=\"string\">&#x27;r&#x27;</span>,<span class=\"string\">&#x27;s&#x27;</span>], <span class=\"string\">&#x27;8&#x27;</span>:[<span class=\"string\">&#x27;t&#x27;</span>,<span class=\"string\">&#x27;u&#x27;</span>,<span class=\"string\">&#x27;v&#x27;</span>], <span class=\"string\">&#x27;9&#x27;</span>:[<span class=\"string\">&#x27;w&#x27;</span>,<span class=\"string\">&#x27;x&#x27;</span>,<span class=\"string\">&#x27;y&#x27;</span>,<span class=\"string\">&#x27;z&#x27;</span>]&#125;</span><br><span class=\"line\">        ans=[<span class=\"string\">&#x27;&#x27;</span>]</span><br><span class=\"line\">        <span class=\"keyword\">if</span> digits==<span class=\"string\">&quot;&quot;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> [] </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> digits:</span><br><span class=\"line\">            chars.append(graph[i])</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(chars)):</span><br><span class=\"line\">            ans=[c+chars[i][j] <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> ans <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(chars[i]))]</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans</span><br></pre></td></tr></table></div></figure>\n<p>首先字典存储以数字为键对应字母列表为值的一系列item。我们要做的是把所要求的digits对应的可能字母组合全部找出来。</p>\n<p>先把每个数字对应的字母拼接在一个数组里即chars，需要注意的是此时的chars是个二维数组，因此len(chars)返回的为digits的长度,也即组合中任一元素的长度。</p>\n<p>紧接着为了得到可能的所有组合，我们需要显式的去设计循环，而解法中一个列表解析式就完成了所有操作，很简洁也很优雅。具体的逻辑在文末给出。</p>\n<hr />\n\n        <h2 id=\"关于list-comprehension\"   >\n          <a href=\"#关于list-comprehension\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#关于list-comprehension\"></a> 关于List comprehension</h2>\n      \n<p>当我们定义有内容的list的时候，特别是在放入元素前做一些计算的时候，我们除了使用for 循环来添加列表元素，还可以在列表内直接写解析式计算。</p>\n\n        <h2 id=\"list-comprehension-用法\"   >\n          <a href=\"#list-comprehension-用法\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#list-comprehension-用法\"></a> List comprehension 用法</h2>\n      \n\n        <h3 id=\"1-expression-for-i-in-iterable\"   >\n          <a href=\"#1-expression-for-i-in-iterable\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#1-expression-for-i-in-iterable\"></a> 1. [ expression for i in iterable ]</h3>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=[i+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ans:&#x27;</span>,ans)</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">ans: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br></pre></td></tr></table></div></figure>\n<p>对于迭代对象进行加一运算并存放在ans数组中 其中iterable object: range(10) , expression: i+1。</p>\n\n        <h3 id=\"2-expression-for-i-in-iterable-if\"   >\n          <a href=\"#2-expression-for-i-in-iterable-if\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#2-expression-for-i-in-iterable-if\"></a> 2. [ expression for i in iterable if…]</h3>\n      \n<p>如果我们需要对进入target list中的元素进行筛选，我们可以对迭代表达式的末尾加入if 语句</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=[i+<span class=\"number\">1</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">2</span>==<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ans:&#x27;</span>,ans)</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">ans: [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></div></figure>\n<p>之所以选这个例子，是为了使得表达式的逻辑变得更加清晰。通过if语句<code>if i%2==0</code>我们选取了0~9中为偶数的元素进行表达运算，+1以后得到<code>ans: [1, 3, 5, 7, 9]</code></p>\n\n        <h3 id=\"3-expression-for-i-in-iterable-if-for-j-in-iterable-if\"   >\n          <a href=\"#3-expression-for-i-in-iterable-if-for-j-in-iterable-if\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#3-expression-for-i-in-iterable-if-for-j-in-iterable-if\"></a> 3. [ expression for i in iterable if… for j in iterable if… …]</h3>\n      \n<p>更复杂点，双循环+if， 实现了5以内（复数，单数）的所有组合</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=[(i,j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">if</span> i%<span class=\"number\">2</span>==<span class=\"number\">0</span> <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>) <span class=\"keyword\">if</span> j%<span class=\"number\">2</span>==<span class=\"number\">1</span>]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ans:&#x27;</span>,ans)</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">ans: [(<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">4</span>, <span class=\"number\">3</span>)]</span><br></pre></td></tr></table></div></figure>\n<p>它实现的逻辑如下：</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">ans=[]</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> i%<span class=\"number\">2</span>==<span class=\"number\">1</span>:<span class=\"keyword\">continue</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">5</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> j%<span class=\"number\">2</span>==<span class=\"number\">1</span>:ans.append((i,j))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;ans:&#x27;</span>,ans)</span><br><span class=\"line\">----------------------------</span><br><span class=\"line\">ans: [(<span class=\"number\">0</span>, <span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"number\">3</span>), (<span class=\"number\">2</span>, <span class=\"number\">1</span>), (<span class=\"number\">2</span>, <span class=\"number\">3</span>), (<span class=\"number\">4</span>, <span class=\"number\">1</span>), (<span class=\"number\">4</span>, <span class=\"number\">3</span>)]</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"小结\"   >\n          <a href=\"#小结\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#小结\"></a> 小结</h2>\n      \n<p>可以看出来，事实上列表表达式把显式的for循环和if语句简化了。实际中，expression对每一轮迭代循环结束后得到的元素进行操作。</p>\n<hr />\n\n        <h1 id=\"回到引例\"   >\n          <a href=\"#回到引例\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#回到引例\"></a> 回到引例</h1>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(chars)):</span><br><span class=\"line\">    ans=[c+chars[i][j] <span class=\"keyword\">for</span> c <span class=\"keyword\">in</span> ans <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(chars[i]))]</span><br></pre></td></tr></table></div></figure>\n<p>这时候回到引例，</p>\n<img src=\"/2021/04/12/list-comprehension/Telephone-keypad.png\" class=\"\">\n<p>再次强调for循环迭代的次数等于digits字符串的长度，也即最后ans中每个元素的长度。</p>\n<p>接下来分析在每轮迭代中列表解析式究竟做了些什么</p>\n\n        <h2 id=\"循环1\"   >\n          <a href=\"#循环1\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#循环1\"></a> 循环1</h2>\n      \n<p>首先第一层的循环是对于ans也就是我们target list进行的，变量c存储当前遍历元素。</p>\n\n        <h2 id=\"循环2\"   >\n          <a href=\"#循环2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#循环2\"></a> 循环2</h2>\n      \n<p>然后第二层循环是对于 len(chars[i])进行的它返回的是digit中某个数字对应的可能字符个数（如图数字2有3个对应的字母，而数字7和9有4个), 变量j存储当前遍历索引。</p>\n<hr />\n\n        <h2 id=\"表达式\"   >\n          <a href=\"#表达式\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#表达式\"></a> 表达式</h2>\n      \n<p><code>c+chars[i][j]</code>chars[i]表示的是digits中数字的索引，j表示的是该数字对应的可能的字母的索引（对于digits’27’,当i=0的时候，j会从0遍历到2;当i=7的时候，j会从0遍历3）。因此，思考下就能得知，实际上，每轮for循环target list中存放的是前i+1个数字的可能的字母组合。列表解析式所实现的双重循环在增加target list中元素的个数的同时通过expression增加元素的长度。</p>\n","categories":["Programming","Python","List comprehension"],"tags":["Python","List comprehension","LeetCode"]},{"title":"Lambda function","url":"/2021/04/23/Lambda-function/","content":"<!-- more -->\n\n        <h2 id=\"basic-idea\"   >\n          <a href=\"#basic-idea\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#basic-idea\"></a> Basic idea</h2>\n      \n<p>第一次接触到匿名函数还是在学JAVA的时候，它能让代码变得简洁(pithy anonymity )。在Python中其主要是由保留字(keyword)中的Lambda实现的。它的原理很简单，但是有很多用法，配合其他的语法往往有奇效。</p>\n<p>事实上，在之前的博文<a href=\"/2021/04/05/Lloyd-Max%20Quantizer/\" title=\"Lloyd-Max Quantizer\">Lloyd-Max Quantizer</a>中代码实现部分的第7，8行就使用到了这个表达，当时的context是要对一个服从正态分布的随机变量进行积分，而积分函数quad需要输入积分形式的参数以进行积分。显然，lambda表达式让代码变得十分简洁易读。</p>\n<hr />\n<img src=\"/2021/04/23/Lambda-function/lambda.png\" class=\"\">\n<p>上图官方doc对Lambda的介绍，lambda_expr用来声明匿名函数，然后<code>lambda parameters: expression</code>语句为其生成一个函数对象，它与上图中def函数作用相同。</p>\n\n        <h2 id=\"usage\"   >\n          <a href=\"#usage\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#usage\"></a> Usage</h2>\n      \n<p>下面简单介绍下常见的用法</p>\n\n        <h2 id=\"1-单一参数\"   >\n          <a href=\"#1-单一参数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#1-单一参数\"></a> 1. 单一参数</h2>\n      \n<p>实现2*x+1的运算</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x*<span class=\"number\">2</span>+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(f)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"keyword\">lambda</span> x: x*<span class=\"number\">2</span>+<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;def way:&#x27;</span>,f(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;lambda way&#x27;</span>,(<span class=\"keyword\">lambda</span> x: x*<span class=\"number\">2</span>+<span class=\"number\">1</span>)(<span class=\"number\">2</span>))</span><br><span class=\"line\">g=<span class=\"keyword\">lambda</span> x: x*<span class=\"number\">2</span>+<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(g(<span class=\"number\">2</span>))</span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&lt;function f at 0x7f4cbe4d2050&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&lt;function &lt;lambda&gt; at 0x7f4cbe4d2440&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;def way: 5&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;lambda way: 5&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;5&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n<p>通过上图，可以看到lambda表达式开辟了一个函数空间，我们可以选择赋予其一个函数名比如上面的g，也可以直接使用如表达式<code>(lambda x: x*2+1)(2)</code></p>\n<hr />\n\n        <h2 id=\"2-多参数或者无参数\"   >\n          <a href=\"#2-多参数或者无参数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#2-多参数或者无参数\"></a> 2. 多参数或者无参数</h2>\n      \n\n        <h3 id=\"多参数\"   >\n          <a href=\"#多参数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#多参数\"></a> 多参数</h3>\n      \n<p>实现名和姓的合并输出</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">name=<span class=\"keyword\">lambda</span> fn,ln: fn.strip().title()+<span class=\"string\">&quot; &quot;</span>+ln.strip().title()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(name(<span class=\"string\">&#x27;LAST  &#x27;</span>,<span class=\"string\">&#x27;   XUAN&#x27;</span>),<span class=\"string\">&#x27;\\n&#x27;</span>,name(<span class=\"string\">&#x27;shiny  &#x27;</span>,<span class=\"string\">&#x27;   ruo&#x27;</span>))</span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Last Xuan&#x27;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;Shiny Ruo&#x27;</span></span><br></pre></td></tr></table></div></figure>\n<p>其中strip和title是为了自动纠正不规范输入的函数，前者去掉内容收尾冗余的空格后者让首字母大写其余小写。</p>\n\n        <h3 id=\"无参数\"   >\n          <a href=\"#无参数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#无参数\"></a> 无参数</h3>\n      \n<p>lambda表达式不添加参数，相当于过程函数，函数执行函数体内的句子但不返回任何值。</p>\n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">process_func=<span class=\"keyword\">lambda</span> : <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;nothing to return&#x27;</span>)</span><br><span class=\"line\">process_func()</span><br><span class=\"line\">-----------------------------------------------</span><br><span class=\"line\"><span class=\"comment\"># output</span></span><br><span class=\"line\"><span class=\"string\">&#x27;nothing to return&#x27;</span></span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"内嵌于其他函数\"   >\n          <a href=\"#内嵌于其他函数\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#内嵌于其他函数\"></a> 内嵌于其他函数</h3>\n      \n<p>事实上函数也可以作为函数的参数，一开始quad函数就是这种情况的一个实例。这种情况下所需的函数往往并不是很复杂，但是又需要有一定的灵活性，那么lambda函数就显得很便捷。如常用的sort,filter,map,reduce等，具体的用法在下一次更新~</p>\n","categories":["Programming","Python","Lambda function"],"tags":["Python","Lambda function"]},{"title":"Lloyd-Max Quantizer","url":"/2021/04/05/Lloyd-Max%20Quantizer/","content":"\n        <h1 id=\"pdf资料\"   >\n          <a href=\"#pdf资料\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#pdf资料\"></a> PDF资料</h1>\n      \n\n\n\t<div class=\"row\">\n    <embed src=\"./Max-Floyd.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n\n        <h1 id=\"作业要求\"   >\n          <a href=\"#作业要求\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#作业要求\"></a> 作业要求</h1>\n      \n<blockquote>\n<p>参考 Max-Floyd.pdf 中的example 2, 将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>修改成高斯分布<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N(0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n\n        <h1 id=\"代码实现\"   >\n          <a href=\"#代码实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scipy.stats <span class=\"keyword\">as</span> stats</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.integrate <span class=\"keyword\">import</span> quad</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">y1=<span class=\"number\">0.3</span>;y2=<span class=\"number\">0.8</span>;max_iterations=<span class=\"number\">500</span>;precision=<span class=\"number\">1e-9</span></span><br><span class=\"line\"><span class=\"comment\"># p=1</span></span><br><span class=\"line\"><span class=\"comment\"># p=stats.norm.pdf(x,0,1)</span></span><br><span class=\"line\">num_func=<span class=\"keyword\">lambda</span> x: x*stats.norm.pdf(x,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">den_func=<span class=\"keyword\">lambda</span> x: stats.norm.pdf(x,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_iterations):</span><br><span class=\"line\">    b1=(y1+y2)/<span class=\"number\">2</span></span><br><span class=\"line\">    Num1,Nerr1=quad(num_func,<span class=\"number\">0</span>,b1)</span><br><span class=\"line\">    Den1,Derr1=quad(den_func,<span class=\"number\">0</span>,b1) </span><br><span class=\"line\">    y1=Num1/Den1</span><br><span class=\"line\">    Num2,Nerr2=quad(num_func,b1,<span class=\"number\">1</span>)</span><br><span class=\"line\">    Den2,Derr2=quad(den_func,b1,<span class=\"number\">1</span>) </span><br><span class=\"line\">    tmp=y2</span><br><span class=\"line\">    y2=Num2/Den2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(y2-tmp)&lt;precision:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;iterations:&#x27;</span>,i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y1:&#x27;</span>,y1,<span class=\"string\">&#x27;y2:&#x27;</span>,y2,<span class=\"string\">&#x27;b1:&#x27;</span>,b1)</span><br></pre></td></tr></table></div></figure>\n\n        <h1 id=\"深入思考\"   >\n          <a href=\"#深入思考\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#深入思考\"></a> 深入思考</h1>\n      \n<p>未完待写…</p>\n","categories":["Machine learning"],"tags":["Machine learning","Python","Optimisation"]},{"title":"些许记录和感悟 （一）","url":"/2021/04/06/%E4%BA%9B%E8%AE%B8%E8%AE%B0%E5%BD%95%E5%92%8C%E6%84%9F%E6%82%9F/","content":"<p>就这样大学快毕业了，在杭州这座城市也呆了十年。很多事情恍惚间好像还是发生在昨天。我不是一个热衷于表达自我的人，我更倾向于去观察去感受。但是在这个结点我总觉得该写些什么去记录一些过往。可能是想在这梦幻般的二十几年中捕捉一点真实，也可能是想以这个方式分担背负在身上的压抑了很久的情感包袱。这一系列记录也将在我的技术博客中以友谊，爱情，爱好，学习，以及我对人生对这个世界的一些浅薄认知慢慢展开。</p>\n\n        <h2 id=\"论友谊\"   >\n          <a href=\"#论友谊\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#论友谊\"></a> 论友谊</h2>\n      \n<p>不知道为什么先是友谊，也许是我最近因此而烦恼吧？关于友谊，我的朋友很少，自然的社交对我来说从来都是一件很具挑战的事情。从小学开始，除了同班同学我很难结识新的朋友。这里需要澄清的一点大概是，并不是说我是一个很恶劣的人。只是过往经历和性格的原因导致我很少去主动认识新朋友，对于那些向我抛出橄榄枝的同学，我经常因为不知所措而冷漠回应，留下了不友好的印象。</p>\n<p>当然，有时候我也能幸运的交到聊得来玩的开的好朋友，但是对于矛盾误会糟糕的处理以及对于维持关系的疏忽，许多朋友最后都失望离开。<strong>这样的事情仍在发生，我似乎也从未很好吸取教训，讽刺的是直到寂寞再次袭来时才自私的开始意识到朋友的重要性。</strong></p>\n<p>重新审视友谊，我发现自己一直以来没有很好理解什是友谊。小时候我总以为友谊是物质上的交互，借给同桌的橡皮擦，得到的生日礼物。后来我发现, 友谊不仅仅是物质上的交互也是情感的交流。“你讲的笑话好好笑”，“你真幽默”，“谢谢你安慰我”诸如此类。再后来，我发现友谊是包容是忍让，是真心真意为对方着想，希望对方可以变得更好并由衷的为此而高兴，是一种比较高级的情感。<strong>它是对等的而不是建立在利益之上的互相利用或者是怜悯施舍对方从中获得优越感</strong>。</p>\n<p>友谊的敌人是猜疑和嫉妒，这无可厚非，因为人性如此，这是基因所带来的。本质上它们都是一种情绪，有时候超出我们的控制。我深受其害并且十分厌恶这种情绪，因为它野蛮不很优雅，并且它们破坏了很多友谊，也因此让我失去了很多很好的朋友。</p>\n<p>我曾经花了很多时间去留意这种本能的情绪也尝试阅读相关专业的研究。简而言之我倾向于认为，它来源于一种认知冲突，它在比较中将别人拥有而自己未有的落差转换为一种失去或是不得的感受，但是内心却不认可这个比较带来的冲突，为了解决这个冲突，内心进化出一种心理策略来平衡这种认知的矛盾。 这种情绪会在与自己不认可的人的比较中更为强烈。对内，这是一种很强的内耗，对外，它会表现出强的言语或者行为上的攻击性。</p>\n<p>显而易见，它似乎没有任何益处。但事实上在生活中，甚至是朋友亲人之间这也十分常见，有时候它甚至能支配言语和行动。我清楚的记得，以前交好的一位朋友（带我入英雄联盟深坑的罪魁祸首），我们经常在一起玩一起打游戏，但是每次大小考成绩一出我总是拿自己和他的比较，如果我总分高就开心的不行浑身愉悦，要是低就会变得很低落。有时候很正常的关于学习经验的对话，我总会认为这是他变相的炫耀。终于一次尖锐的言语不由自主的从嘴里说出，面面相觑中，友谊已经出现无法恢复的伤痕。</p>\n<p>那时候我还意识不到那种心情，直到后来在我取得些许成就之时，满心欢喜分享给好朋友的时候，对方刻薄的回应，我才体会到这是什么滋味，也明白了之前的自己究竟做了些什么蠢事。</p>\n<p>不断的反思，对于嫉妒/妒忌这类的情感，我认为大方的承认别人的好，感受到自己的不足，虚心的去学习去改变自己才是对的。You only live once, 为什么不能少一点狭隘多一点坦诚呢？</p>\n<p>友谊有敌人当然也有朋友，我认为友谊的朋友应该是包容和信任，它就像是友谊的修补剂，让接近分崩离析的友谊重新牢固，让其从牢固变得坚不可摧。但这种情感是反本能的，因为包容和信任意味着在受到背叛或者是威胁后选择依然相信。从概率论来说，像是一种条件概率，意味着你受到下次背叛或者威胁的概率将会变得更大。</p>\n<p>但其实这也是合理的，因为朋友之所以能成为朋友就存在其他互相欣赏的地方。而且人无完人，每个人有自己的境遇有着不同的困惑也分别处在不同的人生阶段，矛盾和误会不可避免，生活的不如意也会将这种情绪放大无数倍。</p>\n<p>回头望去，一路上其实有不少的朋友包容过我，鼓励过我。他们之中有的已经和我走散了，有的还是我的好朋友。但是不管如何，我都很感激他们，因此往后也希望自己变得更加包容，尝试去信任他人鼓励他人。我想这也是英文中常被提到的Be nice的含义吧。</p>\n<p>说了这么多，我愈发觉得纯洁的友谊是多么难得多么奢侈的一样东西。所幸，在我屈指可数的朋友之中我还能瞥见它的影子。这也让我更加坚定的让自己变得更好，去珍惜维护它们，不像以前一样再毁了它。</p>\n","categories":["Life","Record"],"tags":["Life","Friendship"]},{"title":"双指针类型题解（一）","url":"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<!-- more -->\n\n        <h1 id=\"快慢指针\"   >\n          <a href=\"#快慢指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#快慢指针\"></a> 快慢指针</h1>\n      \n<p>大意是把单链表中倒数第n个结点给剔除，链表不同于数组并没有显式的给出长度，也不能简单通过索引定位。因此找到目标结点就需要一些特殊的trick，事实上也有着很多奇妙的解法。但是在这里，快慢指针是比较容易想到也比较高效的解法。快慢指针的方法很简单就是初始化两个指针，在每一轮的迭代中它们移动的步长存在快慢差异。</p>\n\n        <h2 id=\"19-remove-nth-node-from-end-of-list\"   >\n          <a href=\"#19-remove-nth-node-from-end-of-list\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#19-remove-nth-node-from-end-of-list\"></a> 19. Remove Nth Node From End of List</h2>\n      \n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n      \n<p>对于这题，我们可以让快指针先移动n步，然后再启动慢指针并保持步长为1的同速。最后当快指针到达链表尾结点的时候，停止迭代。因为快指针比慢指针多移动了n步，所以它到达终点时领先了慢指针n步，因此此时慢指针的索引即为我们目标索引。</p>\n\n        <h3 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeNthFromEnd</span>(<span class=\"params\">self, head: ListNode, n: <span class=\"built_in\">int</span></span>) -&gt; ListNode:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> fast:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.<span class=\"built_in\">next</span> <span class=\"comment\"># case: n=size</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">        slow.<span class=\"built_in\">next</span>=slow.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span> <span class=\"comment\"># delete n_th node from end</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"谬误与反思\"   >\n          <a href=\"#谬误与反思\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思\"></a> 谬误与反思</h3>\n      \n<p>一开始想错了 在上面for i = n+1这会导致溢出, 其次忽略了n=size的情况。</p>\n<hr />\n\n        <h2 id=\"141-linked-list-cycle\"   >\n          <a href=\"#141-linked-list-cycle\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#141-linked-list-cycle\"></a> 141. Linked List Cycle</h2>\n      \n\n        <h3 id=\"思路-2\"   >\n          <a href=\"#思路-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路-2\"></a> 思路</h3>\n      \n<p>题目让判断链表是否存在环，想成操场追击问题，如果有环快指针先进入环，等待慢指针进入环后，想下速度v=2和v=1的俩人在操场跑步，它们一定会相遇的~</p>\n\n        <h3 id=\"代码-2\"   >\n          <a href=\"#代码-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码-2\"></a> 代码</h3>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast==slow:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"谬误与反思-2\"   >\n          <a href=\"#谬误与反思-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思-2\"></a> 谬误与反思</h3>\n      \n<ol>\n<li>\n<p>一开始忽略了[]空链表的情况，Nonetype 没有next attribute的报错。</p>\n</li>\n<li>\n<p>一开始没有注意到while里的条件，事实上应当是，<code>fast and fast.next</code>。and 短路逻辑运算符则很好的解决了无环情况下最后fast指针是否到达None结点的两种case，防止循环内快指针移动报错。</p>\n</li>\n</ol>\n\n        <h2 id=\"142-linked-list-cycle-ii\"   >\n          <a href=\"#142-linked-list-cycle-ii\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#142-linked-list-cycle-ii\"></a> 142. Linked List Cycle II</h2>\n      \n\n        <h2 id=\"思路-3\"   >\n          <a href=\"#思路-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路-3\"></a> 思路</h2>\n      \n<img src=\"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image.png\" class=\"\">\n<p>quora上比较intuition的解答:</p>\n<img src=\"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/solution_quora.png\" class=\"\">\n<p>需要注意的是z的长度可能是z+n*length(circle), n是多少与x和环的长度有关，极端点设想环的长度是1就懂了。</p>\n\n        <h2 id=\"代码-3\"   >\n          <a href=\"#代码-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码-3\"></a> 代码</h2>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow: <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>): <span class=\"comment\"># if no circle</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> fast:</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"谬误与反思-3\"   >\n          <a href=\"#谬误与反思-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思-3\"></a> 谬误与反思</h2>\n      \n<ol>\n<li>\n<p>一开始把空链表和单一元素链表的情况拎出去了，导致写的有点繁琐，事实上判断有无环的循环再进行判断这俩case会比较方便。</p>\n</li>\n<li>\n<p>写判断的时候一开始脑子热了，把not(fast and fast.next)写成 not fast and not fast.next，其实相当于¬((a )∧(b))  ！= ¬a ∧ ¬b，此情景下应该是前者，（离散数学是真的忘光了QAQ）</p>\n</li>\n</ol>\n","categories":["Programming","LeetCode","Double pointer"],"tags":["LeetCode","Double pointer","Link list"]},{"title":"实验室Linux服务器环境部署(一)","url":"/2021/04/27/%E5%AE%9E%E9%AA%8C%E5%AE%A4Linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2%EF%BC%88%E4%B8%80)/","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><script class=\"meting-secondary-script-marker\" src=\"/assets/js/Meting.min.js\"></script><!-- more -->\n\n<p>因为并非CS科班，之前少有机会接触这方面的内容，对于计算机的底层架构和Linux都是比较陌生的，因此此篇只浅显介绍下大致原理以及miniconda创建虚拟环境并通过本地jupyter连接远程服务器的流程。</p>\n<hr />\n\n        <h2 id=\"关于服务器\"   >\n          <a href=\"#关于服务器\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#关于服务器\"></a> 关于服务器</h2>\n      \n<p>服务器硬件配置如下：</p>\n<div class=\"table-container\"><table>\n<thead>\n<tr>\n<th>CPU</th>\n<th>XEON 5115*2</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>内存</td>\n<td>DDR4 2666 16G*8</td>\n</tr>\n<tr>\n<td>RAID卡</td>\n<td>2GB SAS RAID卡</td>\n</tr>\n<tr>\n<td>GPU卡</td>\n<td>NV 2080TI*6</td>\n</tr>\n<tr>\n<td>固态硬盘</td>\n<td>480G 2.5 SATA 6Gb R SSD</td>\n</tr>\n<tr>\n<td>机械硬盘</td>\n<td>1.8TB 2.5寸 10K 12Gb SAS硬盘*5</td>\n</tr>\n<tr>\n<td>电源模块</td>\n<td>2000W 电源模块X4</td>\n</tr>\n</tbody>\n</table></div>\n<p>操作系统：<strong>Ubuntu 16.04.6 LTS (GNU/Linux 4.15.0-128-generic x86_64)</strong></p>\n<p>每个团队都分配到了账号，管理员在创建目录的时候给每个团队建立了一个主目录，通常在/home下，团队对自己主目录的文件拥有所有权，可以用于进行各种操作。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh teamn@x.x.x.x</span><br></pre></td></tr></table></div></figure>\n<p>这一步是通过ssh远程连接服务器，其中x.x.x.x是服务器的地址，teamn则是分配到的账号。紧接着会让你输入密码</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">teamn@x.x.x.x&#x27;s password: </span><br></pre></td></tr></table></div></figure>\n<p>这里是看不见输入的密码长度的，只需要在键盘上盲打然后按回车就行。密码正确后会显示登录服务器名和账号。可以输入命令<strong>ls</strong>来看当前目录的所有文件，连接时我们处于/home/teamn的用户主目录，我们也可以使用命令<strong>cd …<strong>返回上级目录或者</strong>cd file_name</strong> (file_name当前目录下某个文件夹的名字)来进入到子目录中。</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">nvidia-smi</span><br></pre></td></tr></table></div></figure>\n<p>BTW上述命令可以查看GPU状态</p>\n\n        <h2 id=\"二-在服务器上安装linux版anaconda\"   >\n          <a href=\"#二-在服务器上安装linux版anaconda\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#二-在服务器上安装linux版anaconda\"></a> 二、在服务器上安装Linux版Anaconda</h2>\n      \n<p>这里我直接本地下载然后，上传到服务器的目录，然后执行</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash Anaconda3-2020.11-Linux-x86_64.sh</span><br></pre></td></tr></table></div></figure>\n<p>进行安装，安装完以后可以输入conda进行验证。</p>\n\n        <h2 id=\"三-创建虚拟环境\"   >\n          <a href=\"#三-创建虚拟环境\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#三-创建虚拟环境\"></a> 三、创建虚拟环境</h2>\n      \n\n        <h3 id=\"-虚拟环境简单介绍\"   >\n          <a href=\"#-虚拟环境简单介绍\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#-虚拟环境简单介绍\"></a> -虚拟环境简单介绍</h3>\n      \n<p>目前我理解的创建虚拟环境的动机主要是 1.不同项目或者库的依赖不同，同一个包在不同项目中对应版本的不同，因此很难兼容，频繁的去upgrade或者downgrade明显过于繁琐。 2. 一个团队大家共用一个账号，如果共用一个环境显然会变得更加混乱。因此创建虚拟环境就十分有必要，使用时激活，环境配置都在激活的环境中进行，环境之间互不影响，并且可以本地或者远程clone别人的环境来进行自己的部署开发。</p>\n<p>事实上，环境管理的工具很多，有virtualenv, Pipenv, conda,docker等。我们熟知的pip是包管理工具, virtualenv可以管理环境。而conda两者兼有，因此这里我们使用conda,conda还有miniconda，其中后者更加轻便。</p>\n\n        <h3 id=\"-创建环境\"   >\n          <a href=\"#-创建环境\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#-创建环境\"></a> -创建环境</h3>\n      \n<p>这里只介绍几种简单用法，具体可以参考官方文档[2]</p>\n<p>创建名为myenv的环境</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create --name myenv</span><br></pre></td></tr></table></div></figure>\n<p>创建默认环境带python为3.6版本</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n myenv python=3.6</span><br></pre></td></tr></table></div></figure>\n<p>创建带有scipy库的默认环境</p>\n<figure class=\"highlight shell\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n myenv scipy</span><br><span class=\"line\">or</span><br><span class=\"line\">conda create -n myenv python</span><br><span class=\"line\">conda install -n myenv scipy</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"-常用命令\"   >\n          <a href=\"#-常用命令\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#-常用命令\"></a> -常用命令</h3>\n      \n<p>conda list</p>\n<p>类似于pip list,可以查看当前环境目录安装的所有库</p>\n<p>conda info -e</p>\n<p>查看创建的所有环境，会显示所有环境的名字</p>\n<p>conda activate <strong>env_name</strong></p>\n<p>激活环境, env_name是环境的名字</p>\n<p>conda deactivate <strong>env_name</strong></p>\n<p>关闭环境</p>\n\n        <h2 id=\"四-本地连接服务器端jupyter-notebook\"   >\n          <a href=\"#四-本地连接服务器端jupyter-notebook\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#四-本地连接服务器端jupyter-notebook\"></a> 四、本地连接服务器端Jupyter notebook</h2>\n      \n<p>事实上也可以改jupyter config的一些配置，直接远程访问该jupyter（remote address:YYYY），这里由于某些原因我失败了暂时选择了如上方法</p>\n<p><code>ssh -N -f -L localhost:XXXX:localhost:YYYY team6@192.168.xx.xx</code></p>\n<p>-N 告诉SSH没有命令要被远程执行</p>\n<p>-f 告诉SSH在后台执行</p>\n<p>-L 指定port forwarding的配置 远程端口是YYYY 本地是XXXX</p>\n<p>相当于一个映射，把服务器地址映射到 localhost的一个端口（事实上也可以改jupyter config的一些配置，直接远程访问该jupyter，这里由于某些原因我失败了暂时选择了如上方法）</p>\n<hr />\n<p>随后打开任意浏览器地址栏输入localhost:XXXX并输入密码 xxxx（这是我之前在jupyter config里设置的）,即可进入 。</p>\n<p>这里如果我们想在jupyter上运行Shell命令，只需要在代码运行的cell前面加! ,   如果需要交互 可以在末尾加–yes 或者-- yes *</p>\n\n        <h2 id=\"reference\"   >\n          <a href=\"#reference\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#reference\"></a> Reference</h2>\n      \n<p>[1]<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html\" >https://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n<p>[2]<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands\" >https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#creating-an-environment-with-commands</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n<p>[3]<span class=\"exturl\"><a class=\"exturl__link\"   href=\"https://jupyter-notebook.readthedocs.io/en/stable/public_server.html\" >https://jupyter-notebook.readthedocs.io/en/stable/public_server.html</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>\n","categories":["Linux","Server"],"tags":["Linux","Server","Environment"]}]