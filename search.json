[{"title":"神经网络中的数据表示","url":"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/","content":"\n        <h1 id=\"神经网络中的数据表示\"   >\n          <a href=\"#神经网络中的数据表示\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#神经网络中的数据表示\"></a> 神经网络中的数据表示</h1>\n      \n<p>矩阵运算加块了神经网络的计算速度，而在应用中数据常常存储在多维Numpy数组中，其也被称为张量(tensor). 当前基本所有机器学习系统都使用张量作为数据结构，它对这个领域尤为的重要，以TensorFlow的命名就可窥见。</p>\n<p>张量这一概念的核心在与，它是数据容器。 其中矩阵就是二维张量，张量事实上是矩阵向任意维度的推广。（张量的维度(dimension)常被称作轴(axis)，张量轴的个数被称为阶（rank））</p>\n<hr />\n\n        <h2 id=\"标量scalar0d张量\"   >\n          <a href=\"#标量scalar0d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#标量scalar0d张量\"></a> 标量（scalar）0D张量</h2>\n      \n<p>Numpy中，一个 float32和float64的数字就是一个0D张量。其可用ndim属性来查看。0D张量的ndim==0,如下图所示。</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306204113139.png\" class=\"\">\n\n        <h2 id=\"向量vector1d张量\"   >\n          <a href=\"#向量vector1d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#向量vector1d张量\"></a> 向量（vector）1D张量</h2>\n      \n<p>很多数据中标签是存储在1D张量中的。其形式如下</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306204514761.png\" class=\"\">\n<p>这个向量中有6个元素，被称为6D向量，易与张量的阶数混淆。事实上6D向量只有一个轴，沿着轴有6个维度(dimensionality)。6D张量才有6个轴。其中，维度既可以表示某个轴上的元素个数，也可以表示张量中的轴数。后者更准确的叫法应该是6阶张量。但是6D张量这种写法常见。</p>\n\n        <h2 id=\"矩阵matrix-2d张量\"   >\n          <a href=\"#矩阵matrix-2d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#矩阵matrix-2d张量\"></a> 矩阵(matrix) 2D张量</h2>\n      \n<p>向量组成的数组叫矩阵。矩阵有两个轴，通常称为行（row）和列(column)，其形式如下</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210108337.png\" class=\"\">\n<p>3X2的矩阵</p>\n\n        <h2 id=\"3d张量\"   >\n          <a href=\"#3d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#3d张量\"></a> 3D张量</h2>\n      \n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210342187.png\" class=\"\">\n<p>以CIFAR10数据集为例</p>\n<img src=\"/2021/04/04/2021%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E7%A4%BA/image-20210306210616667.png\" class=\"\">\n<p>3D张量分别存储 高度 宽度和颜色深度，其大小为32*32像素，颜色深度维数为3，分别对应RGB三个颜色通道。</p>\n\n        <h2 id=\"4d张量\"   >\n          <a href=\"#4d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#4d张量\"></a> 4D张量</h2>\n      \n<p>关于4D张量：当许多图片累加起来时3D张量就不足以存储，需要增加一个拥有N维的轴来存储N个图片样本。</p>\n\n        <h2 id=\"5d张量\"   >\n          <a href=\"#5d张量\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#5d张量\"></a> 5D张量</h2>\n      \n<p>关于5D张量：其中视频数据可以被看做事5D张量的少数数据类型之一，视频可以被看做由一系列帧（Frame）构成。每一个帧可以保存在一个形状为（height,width,color_depth）的3D向量中，一系列帧可以保存在(frames,height,width,color_depth)的4D张量中，不同视频数据组成的批量可以保存在5D张量中(samples,frames,height,width,color_depth)</p>\n","categories":["Programming"],"tags":["Deep Learning","Data Science"]},{"title":"Interpretable Machine Learning","url":"/2021/04/05/Interpretable%20Machine%20Learning/","content":"","categories":["Machine learning","Interpretable Machine Learning"],"tags":["Machine learning","Interpretable Machine Learning","LIME"]},{"title":"些许记录和感悟 （一）","url":"/2021/04/06/%E4%BA%9B%E8%AE%B8%E8%AE%B0%E5%BD%95%E5%92%8C%E6%84%9F%E6%82%9F/","content":"<p>就这样大学快毕业了，在杭州这座城市也呆了十年。很多事情恍惚间好像还是发生在昨天。我不是一个热衷于表达自我的人，我更倾向于去观察去感受。但是在这个结点我总觉得该写些什么去记录一些过往。可能是想在这梦幻般的二十几年中捕捉一点真实，也可能是想以这个方式分担背负在身上的压抑了很久的情感包袱。这一系列记录也将在我的技术博客中以友谊，爱情，爱好，学习，以及我对人生对这个世界的一些浅薄认知慢慢展开。</p>\n\n        <h2 id=\"论友谊\"   >\n          <a href=\"#论友谊\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#论友谊\"></a> 论友谊</h2>\n      \n<p>不知道为什么先是友谊，也许是我最近因此而烦恼吧？关于友谊，我的朋友很少，自然的社交对我来说从来都是一件很具挑战的事情。从小学开始，除了同班同学我很难结识新的朋友。这里需要澄清的一点大概是，并不是说我是一个很恶劣的人。只是过往经历和性格的原因导致我很少去主动认识新朋友，对于那些向我抛出橄榄枝的同学，我经常因为不知所措而冷漠回应，留下了不友好的印象。</p>\n<p>当然，有时候我也能幸运的交到聊得来玩的开的好朋友，但是对于矛盾误会糟糕的处理以及对于维持关系的疏忽，许多朋友最后都失望离开。<strong>这样的事情仍在发生，我似乎也从未很好吸取教训，讽刺的是直到寂寞再次袭来时才自私的开始意识到朋友的重要性。</strong></p>\n<p>重新审视友谊，我发现自己一直以来没有很好理解什是友谊。小时候我总以为友谊是物质上的交互，借给同桌的橡皮擦，得到的生日礼物。后来我发现, 友谊不仅仅是物质上的交互也是情感的交流。“你讲的笑话好好笑”，“你真幽默”，“谢谢你安慰我”诸如此类。再后来，我发现友谊是包容是忍让，是真心真意为对方着想，希望对方可以变得更好并由衷的为此而高兴，是一种比较高级的情感。<strong>它是对等的而不是建立在利益之上的互相利用或者是怜悯施舍对方从中获得优越感</strong>。</p>\n<p>友谊的敌人是猜疑和嫉妒，这无可厚非，因为人性如此，这是基因所带来的。本质上它们都是一种情绪，有时候超出我们的控制。我深受其害并且十分厌恶这种情绪，因为它野蛮不很优雅，并且它们破坏了很多友谊，也因此让我失去了很多很好的朋友。</p>\n<p>我曾经花了很多时间去留意这种本能的情绪也尝试阅读相关专业的研究。简而言之我倾向于认为，它来源于一种认知冲突，它在比较中将别人拥有而自己未有的落差转换为一种失去或是不得的感受，但是内心却不认可这个比较带来的冲突，为了解决这个冲突，内心进化出一种心理策略来平衡这种认知的矛盾。 这种情绪会在与自己不认可的人的比较中更为强烈。对内，这是一种很强的内耗，对外，它会表现出强的言语或者行为上的攻击性。</p>\n<p>显而易见，它似乎没有任何益处。但事实上在生活中，甚至是朋友亲人之间这也十分常见，有时候它甚至能支配言语和行动。我清楚的记得，以前交好的一位朋友（带我入英雄联盟深坑的罪魁祸首），我们经常在一起玩一起打游戏，但是每次大小考成绩一出我总是拿自己和他的比较，如果我总分高就开心的不行浑身愉悦，要是低就会变得很低落。有时候很正常的关于学习经验的对话，我总会认为这是他变相的炫耀。终于一次尖锐的言语不由自主的从嘴里说出，面面相觑中，友谊已经出现无法恢复的伤痕。</p>\n<p>那时候我还意识不到那种心情，直到后来在我取得些许成就之时，满心欢喜分享给好朋友的时候，对方刻薄的回应，我才体会到这是什么滋味，也明白了之前的自己究竟做了些什么蠢事。</p>\n<p>不断的反思，对于嫉妒/妒忌这类的情感，我认为大方的承认别人的好，感受到自己的不足，虚心的去学习去改变自己才是对的。You only live once, 为什么不能少一点狭隘多一点坦诚呢？</p>\n<p>友谊有敌人当然也有朋友，我认为友谊的朋友应该是包容和信任，它就像是友谊的修补剂，让接近分崩离析的友谊重新牢固，让其从牢固变得坚不可摧。但这种情感是反本能的，因为包容和信任意味着在受到背叛或者是威胁后选择依然相信。从概率论来说，像是一种条件概率，意味着你受到下次背叛或者威胁的概率将会变得更大。</p>\n<p>但其实这也是合理的，因为朋友之所以能成为朋友就存在其他互相欣赏的地方。而且人无完人，每个人有自己的境遇有着不同的困惑也分别处在不同的人生阶段，矛盾和误会不可避免，生活的不如意也会将这种情绪放大无数倍。</p>\n<p>回头望去，一路上其实有不少的朋友包容过我，鼓励过我。他们之中有的已经和我走散了，有的还是我的好朋友。但是不管如何，我都很感激他们，因此往后也希望自己变得更加包容，尝试去信任他人鼓励他人。我想这也是英文中常被提到的Be nice的含义吧。</p>\n<p>说了这么多，我愈发觉得纯洁的友谊是多么难得多么奢侈的一样东西。所幸，在我屈指可数的朋友之中我还能瞥见它的影子。这也让我更加坚定的让自己变得更好，去珍惜维护它们，不像以前一样再毁了它。</p>\n","categories":["Life","Record"],"tags":["Life","Friendship"]},{"title":"双指针类型题解（一）","url":"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/","content":"<!-- more -->\n\n        <h1 id=\"快慢指针\"   >\n          <a href=\"#快慢指针\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#快慢指针\"></a> 快慢指针</h1>\n      \n<p>大意是把单链表中倒数第n个结点给剔除，链表不同于数组并没有显式的给出长度，也不能简单通过索引定位。因此找到目标结点就需要一些特殊的trick，事实上也有着很多奇妙的解法。但是在这里，快慢指针是比较容易想到也比较高效的解法。快慢指针的方法很简单就是初始化两个指针，在每一轮的迭代中它们移动的步长存在快慢差异。</p>\n\n        <h2 id=\"19-remove-nth-node-from-end-of-list\"   >\n          <a href=\"#19-remove-nth-node-from-end-of-list\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#19-remove-nth-node-from-end-of-list\"></a> 19. Remove Nth Node From End of List</h2>\n      \n\n        <h3 id=\"思路\"   >\n          <a href=\"#思路\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路\"></a> 思路</h3>\n      \n<p>对于这题，我们可以让快指针先移动n步，然后再启动慢指针并保持步长为1的同速。最后当快指针到达链表尾结点的时候，停止迭代。因为快指针比慢指针多移动了n步，所以它到达终点时领先了慢指针n步，因此此时慢指针的索引即为我们目标索引。</p>\n\n        <h3 id=\"代码\"   >\n          <a href=\"#代码\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码\"></a> 代码</h3>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">removeNthFromEnd</span>(<span class=\"params\">self, head: ListNode, n: <span class=\"built_in\">int</span></span>) -&gt; ListNode:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> fast:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head.<span class=\"built_in\">next</span> <span class=\"comment\"># case: n=size</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">        slow.<span class=\"built_in\">next</span>=slow.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span> <span class=\"comment\"># delete n_th node from end</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"谬误与反思\"   >\n          <a href=\"#谬误与反思\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思\"></a> 谬误与反思</h3>\n      \n<p>一开始想错了 在上面for i = n+1这会导致溢出, 其次忽略了n=size的情况。</p>\n<hr />\n\n        <h2 id=\"141-linked-list-cycle\"   >\n          <a href=\"#141-linked-list-cycle\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#141-linked-list-cycle\"></a> 141. Linked List Cycle</h2>\n      \n\n        <h3 id=\"思路-2\"   >\n          <a href=\"#思路-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路-2\"></a> 思路</h3>\n      \n<p>题目让判断链表是否存在环，想成操场追击问题，如果有环快指针先进入环，等待慢指针进入环后，想下速度v=2和v=1的俩人在操场跑步，它们一定会相遇的~</p>\n\n        <h3 id=\"代码-2\"   >\n          <a href=\"#代码-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码-2\"></a> 代码</h3>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">hasCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; <span class=\"built_in\">bool</span>:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast==slow:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br></pre></td></tr></table></div></figure>\n\n        <h3 id=\"谬误与反思-2\"   >\n          <a href=\"#谬误与反思-2\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思-2\"></a> 谬误与反思</h3>\n      \n<ol>\n<li>\n<p>一开始忽略了[]空链表的情况，Nonetype 没有next attribute的报错。</p>\n</li>\n<li>\n<p>一开始没有注意到while里的条件，事实上应当是，<code>fast and fast.next</code>。and 短路逻辑运算符则很好的解决了无环情况下最后fast指针是否到达None结点的两种case，防止循环内快指针移动报错。</p>\n</li>\n</ol>\n\n        <h2 id=\"142-linked-list-cycle-ii\"   >\n          <a href=\"#142-linked-list-cycle-ii\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#142-linked-list-cycle-ii\"></a> 142. Linked List Cycle II</h2>\n      \n\n        <h2 id=\"思路-3\"   >\n          <a href=\"#思路-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#思路-3\"></a> 思路</h2>\n      \n<img src=\"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/image.png\" class=\"\">\n<p>quora上比较intuition的解答:</p>\n<img src=\"/2021/04/07/%E5%8F%8C%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B%E9%A2%98%E8%A7%A3%EF%BC%88%E4%B8%80%EF%BC%89/solution_quora.png\" class=\"\">\n<p>需要注意的是z的长度可能是z+n*length(circle), n是多少与x和环的长度有关，极端点设想环的长度是1就懂了。</p>\n\n        <h2 id=\"代码-3\"   >\n          <a href=\"#代码-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码-3\"></a> 代码</h2>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">detectCycle</span>(<span class=\"params\">self, head: ListNode</span>) -&gt; ListNode:</span></span><br><span class=\"line\">        fast=slow=head</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>):</span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">            slow=slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> fast == slow: <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> (fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>): <span class=\"comment\"># if no circle</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> head <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> fast:</span><br><span class=\"line\">            head=head.<span class=\"built_in\">next</span></span><br><span class=\"line\">            fast=fast.<span class=\"built_in\">next</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"谬误与反思-3\"   >\n          <a href=\"#谬误与反思-3\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#谬误与反思-3\"></a> 谬误与反思</h2>\n      \n<ol>\n<li>\n<p>一开始把空链表和单一元素链表的情况拎出去了，导致写的有点繁琐，事实上判断有无环的循环再进行判断这俩case会比较方便。</p>\n</li>\n<li>\n<p>写判断的时候一开始脑子热了，把not(fast and fast.next)写成 not fast and not fast.next，其实相当于¬((a )∧(b))  ！= ¬a ∧ ¬b，此情景下应该是前者，（离散数学是真的忘光了QAQ）</p>\n</li>\n</ol>\n","categories":["Programming","LeetCode","Double pointer"],"tags":["LeetCode","Double pointer","Link list"]},{"title":"记一次课堂project","url":"/2021/04/05/%E8%AE%B0%E4%B8%80%E6%AC%A1%E8%AF%BE%E5%A0%82project/","content":"\n        <h1 id=\"pdf资料\"   >\n          <a href=\"#pdf资料\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#pdf资料\"></a> PDF资料</h1>\n      \n\n\n\t<div class=\"row\">\n    <embed src=\"./Max-Floyd.pdf\" width=\"100%\" height=\"550\" type=\"application/pdf\">\n\t</div>\n\n\n\n\n        <h1 id=\"作业要求\"   >\n          <a href=\"#作业要求\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#作业要求\"></a> 作业要求</h1>\n      \n<blockquote>\n<p>参考 Max-Floyd.pdf 中的example 2, 将<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>修改成高斯分布<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>N</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N(0,1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n</blockquote>\n\n        <h1 id=\"代码实现\"   >\n          <a href=\"#代码实现\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#代码实现\"></a> 代码实现</h1>\n      \n<figure class=\"highlight python\"><div class=\"table-container\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scipy.stats <span class=\"keyword\">as</span> stats</span><br><span class=\"line\"><span class=\"keyword\">from</span> scipy.integrate <span class=\"keyword\">import</span> quad</span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\">y1=<span class=\"number\">0.3</span>;y2=<span class=\"number\">0.8</span>;max_iterations=<span class=\"number\">500</span>;precision=<span class=\"number\">1e-9</span></span><br><span class=\"line\"><span class=\"comment\"># p=1</span></span><br><span class=\"line\"><span class=\"comment\"># p=stats.norm.pdf(x,0,1)</span></span><br><span class=\"line\">num_func=<span class=\"keyword\">lambda</span> x: x*stats.norm.pdf(x,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\">den_func=<span class=\"keyword\">lambda</span> x: stats.norm.pdf(x,<span class=\"number\">0</span>,<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(max_iterations):</span><br><span class=\"line\">    b1=(y1+y2)/<span class=\"number\">2</span></span><br><span class=\"line\">    Num1,Nerr1=quad(num_func,<span class=\"number\">0</span>,b1)</span><br><span class=\"line\">    Den1,Derr1=quad(den_func,<span class=\"number\">0</span>,b1) </span><br><span class=\"line\">    y1=Num1/Den1</span><br><span class=\"line\">    Num2,Nerr2=quad(num_func,b1,<span class=\"number\">1</span>)</span><br><span class=\"line\">    Den2,Derr2=quad(den_func,b1,<span class=\"number\">1</span>) </span><br><span class=\"line\">    tmp=y2</span><br><span class=\"line\">    y2=Num2/Den2</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">abs</span>(y2-tmp)&lt;precision:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;iterations:&#x27;</span>,i)</span><br><span class=\"line\">        <span class=\"keyword\">break</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;y1:&#x27;</span>,y1,<span class=\"string\">&#x27;y2:&#x27;</span>,y2,<span class=\"string\">&#x27;b1:&#x27;</span>,b1)</span><br></pre></td></tr></table></div></figure>\n\n        <h1 id=\"深入思考\"   >\n          <a href=\"#深入思考\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a class=\"markdownIt-Anchor\" href=\"#深入思考\"></a> 深入思考</h1>\n      \n<p>未完待写…</p>\n","categories":["Machine learning"],"tags":["Machine learning","Python","Optimisation"]}]